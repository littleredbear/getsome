
一件事情得出答案后就不用再继续思考。
一件事情已经决定了就不用再更改。(更改的唯一条件是，决定是错的。)
切不可舍本逐末，一定要想清楚最本质的想要的东西是什么，而不能被形式所欺骗。
以前一直是站在程序的角度去看待一个程序，现在是站在内核的角度去看待一个程序。以后要站在人的角度去看待一个程序。

第一步，数据包裹。用方法去包裹数据。可以直接使用数据的字段作为方法名。
第二部，依次执行方法列表中的方法。

布局的关键在于寻找不变量，以不变量来定位

写时复制策略：在对数据进行写操作的时候再进行复制。与snapshot技术类似，对一块磁盘进行备份的时候，不是复制一份，而是等到以后要修改数据的时候，复制一份出来修改。进行二次备份的时候，会有一个记录修改量的值，如果修改量不多，则对原来备份区域更新数据，如果修改量大，则对修改数据更新数据，将没修改的数据复制到修改区域。原来备份区域则作为修改区域。

给你优惠，给你个漏洞，我把漏洞的利润加在其它地方赚回来

分用。tcp／ip。数据报头.特定格式。

只有固定的格式，才能重用，因为固定所以可以重用。
不固定的只能生成。由模版生成。

我想做为一个程序，或者说做为一段命令，应该有一个方法能取出来或者说能很方便的取出来其中的每一条命令。要怎样的一种模式，可以支撑起来呢？？？

做检查的时候，首先要检查格式，格式对了之后，再检查内容。

软件和硬件的定义：
  软件开发，就是在一个受到限制的环境中，利用环境提供的可能性，修改或添加环境允许的各种状态，去满足某一组需求。

一次性程序：在运行过程中自我销毁(或许会很有趣)

优先级锁：每个锁都有优先级，加锁的时候判断优先级，如果已经加锁，判断获取锁的优先级和当前请求锁的优先级，请求的优先级高则，请求线程加锁成功，之前加锁的线程回到加锁的指令重新执行重新加锁。

关于标记位：
1.所有的标记位以枚举来实现。

关于复用与耦合：
1.如果没办法确定一个结构是确定的，不会再改变的，那就不要复用它。（只有在完全确定一个结构不会改变的情况下，再复用它）

关于交换协议的最优方案：
1.每条协议对应一个协议结构，而一个协议结构对应多个解析结构。这样协议的内容非常直观。

关于可扩展性：
1.一个功能的可扩展性可以通过预先考虑扩展的方向来留出扩展的空间。
2.更优的方案是将一个功能直接设计为可扩展的。换句话说，就是设计功能的元功能，以元功能的组合来实现所需的功能。而每个元功能互斥。
