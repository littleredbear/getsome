
给一个对列表项做适配的选择。

关于容器的使用：将几个相同的组件放在一起。

about list:

	just store data.not a plane.need an index to recover the plane before.

about notification:

	just support an singleton to store target and callback.

something is my job.something is not my job.I just do my job.

use the least codes to implementate a function

用户程序的本质就是一套“以计算机形式进行描述的用户事物处理方案”，这套方案要通过计算机的运算得到结果，而计算机的运算是由其主机部分完成的。可见，用户程序运行的最根本目的就是通过逐级对其处理问题的方案进行运算。

每一项数据都会有其特定的含义，关键是如何找出数据所关联的信息。

关于寻路的思考：
1.无碰撞体积寻路（点寻路）
2.有碰撞体积寻路->可以将障碍物扩大宽度，转化成点寻路。
3.动态寻路：只有两种处理方式
1).将动态物体当成静态来处理，不停寻路。
2).将动态物体独立处理。可在发生碰撞之后再当成静态物体。(记录动态物体块)

关于地图切分：
1.从头开始切分，记录每块切分后的地图。
2.障碍物块移除时，以切分障碍物的地图，对之后的障碍物重新切分。
3.障碍物添加时，添加到末尾，并切分。

关于编程：编程应该是考虑怎么把计算机操作转换成人类的操作，而不是把人类的操作转换成计算机操作。
一定要以人类的思维去构建结构，而不是以计算机的结构去构建。
修正版：把计算机的操作转换成人的操作所需要的复杂程度 和 把人的操作转换成计算机的操作的复杂程度 两者比较起来，选择简单的那个。一般情况下，把计算机的操作转换成人的操作会比较简单。但是涉及到很大的数量级的话，把人的操作转换成计算机的操作会简单。

对于一个问题，如果一个理论上的算法太过复杂，则很有必要去寻找近似算法，或者使用另外的理论去计算。比如划线算法。毕竟所谓的理论，不过是一种拟合。


