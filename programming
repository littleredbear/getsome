
计算机的世界里面只有一种东西，那就是广义上的数据。再细分可以分为指令和数据。而对象编程和函数编程都是组织指令和数据的方式。

pthread并非Linux系统的默认库，而是POSIX线程库。在Linux中将其作为一个库来使用，因此加上-lpthread以显式链接该库。

pthread面向对象封装：
class Thread {
	void start() {
		pthread_create(&thread_id, NULL, ThreadFunc, this);
	};

	static void * ThreadFunc (void *pth) {
		Thread *p = static_cast<Thread *>(pth);
		p->Run();
	};

	virtual void Run() = 0;	

};


关于线程
读写模型：
1.一个线程负责修改数据，一个线程使用数据，使用数据的线程标记已经使用的数据，修改数据的线程负责删除已经使用的数据，添加新的数据。
2.一个线程标记需要处理的数据，一个线程处理数据，标记处理完成的数据，再另一个线程取出数据，再标记自己的标记

二段式构造：在构造函数内不能泄露this指针，会线程不安全。别的线程可能会访问这个半成品对象。

core dump:核心转储。当进程发生错误或收到信号而终止执行时，系统会将核心映像写入一个文件。
core image：核心映像，就是进程执行当时的内存内容。

一个函数如果要锁住相同类型的多个对象，为了保证始终按相同的顺序加锁，我们可以比较mutex对象的地址，始终先加锁地址较小的mutex。

值语义：所谓值语义是指目标对象由源对象拷贝生成，且生成后与源对象完全无关。就像int类型变量相互拷贝一样。
对象语义：也叫指针语义，引用语义等。通常指一个目标对象由源对象拷贝生成，但生成后与源对象之间依然共享底层资源。

EventLoop:包含一个normalChannel，一个bandChannel，一个Poller。
EventCenter(ThreadPool):控制所有的Thread，分发Event，（在Event调用过程中可以在其他线程处理的Event，尽量把Event细分，在Event调用栈里面，使用ThreadPool来分发任务）

