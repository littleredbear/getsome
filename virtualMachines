1.3进程虚拟机
1.3.1多道程序设计
1.3.2仿真器和动态二进制翻译器
解释器启动开销相对较低，但在指令仿真时要花费很多时间。而二进制翻译虽然初始开销很高，但以后每次重复执行都很快。因此，一些虚拟机采用结合使用剖析（profiling）的分阶段仿真技术，即通过剖析来收集程序行为的统计信息。对频繁执行的指令进行二进制翻译。
1.4系统虚拟机
1.4.2全系统虚拟机：仿真（完全构建在操作系统之上，将ISA操作转化为主机操作系统调用）

所谓仿真就是在一个具有某种接口和功能的系统或子系统上实现另一种与之具有不同接口和功能的系统或子系统的过程。

在指令集方面，仿真允许实现一种指令集的机器通过复制编译到另一种指令集的软件的行为，前一种指令集称为目标指令集(主机），后一种称为源指令集(客户机)。

将源二进制程序转化为目标二进制程序的过程被称为二进制翻译。

高级控制

为了使条件码的仿真更有效率，一种常见的技术是执行惰性计算。

一个重要的限制是用户只能运行为用户的操作系统和处理器指令集所编译的程序。虚拟机的一个重要应用就是避开这一限制，允许用户运行为其它系统所编译的程序。

将结构和实现分开对于计算机系统的设计是很重要的。这种分开是将一个设计的功能特性与实现特性相分离。

系统保留地址空间00000000-00010000，7FFEFFFF-7FFFFFFFF

优化所作的唯一的一件事情就是尽可能的将无效操作去除，减少重复操作。

程序的一个重要性质是动态控制流是高度可预测的。
我们感兴趣的最后一个程序特征是数据值的可预测性。

第一种剖析数据简单地反映不同代码区域的执行频度。频繁执行的代码区域，或者称热点，应该被更多地优化。
第二种重要的剖析数据类型是基于控制流的可预测性，其中剖析程序收集可以用来确定程序动态执行行为方面的控制流统计信息。
其它类型的剖析数据可以用来指导特定的优化。这类剖析数据可以集中在数据或者地址值上。

最近的程序事件历史可能比过去久远的历史更有价值。为此，可以引入一个计数器“衰减”过程。为了实现计数器衰减，剖析管理软件周期性地将所有的剖析计数器除以2.

三种根据控制流来重排基本块的方法。
1.踪迹的形成。
2.超块的形成。
3.树簇。
踪迹和超块是基于条件分支总是判定为一个方向的原则。
对于那些条件分支结果经常是均衡的情况，使用树区域或者树簇而不是超块可能会更好。

将一个对象转化成一种独立于实现的形式的过程被称为序列化。序列化过程包括反射，即具有查找出一个对象内部的所有成员的能力。

锁实际上作为一个计数器而不是作为一个单独的比特标记来操作。如果锁已经被其他线程持有，那么请求锁的线程阻塞并等待。如果锁没有被其他线程持有，那么锁的计数值被增加而请求锁的线程会继续执行。注意获取锁的线程可能已经持有锁，在这种情况下它同样增加锁的计数值并且继续执行。

协同设计虚拟机的目的是着眼于改善性能，功耗效率和设计简单性。

（找到本质，对本质进行处理。虚拟机的本质就是处理程序的本质，程序的本质就是指令集）

一个多道程序操作系统实质上为每一个应用级程序实现了一个进程虚拟机，并在程序间按照分时共享的方式来调度资源。

保证可靠性有两种方式，1.从正面出发，理论逻辑，实际意义上实现绝对可靠性。2.从侧面出发，不断减少发生不可靠性行为的可能，增加相对可靠性。

时间间隔计时器：当被操作系统载入一个值后，它就按时钟递减计数，当数值达到零时便触发一个中断。在将控制权转交给一个用户进程前，操作系统会以用户进程的最大允许运行时间初始化时间间隔计时器，计时器中断将会保证在最大时间间隔内将控制权交还给操作系统。
