
对一个好的软件工程师来说，最重要的事情是知道技术是怎样工作的以及背后的原理。

除了全局行为之外，偶尔地让智能体带着一个条件进入一个状态也会带来方便，条件是当状态退出时，智能体返回到前一个状态。我们称这种行为为状态翻转。

一个自治智能体是这样一个系统，它位于一个环境的内部，是环境的一部分，且能感知该环境对它有效实施的作用，并永远按此进行，为未来的新感知提供条件。

通过划分世界空间处理速度可以有很大的改进。有许多不同的技巧可以被选择使用。（BSP树，四叉树，八叉树等）

导航图是这样一个抽象的结构，它包含了在一个游戏环境中智能体可能访问的所有的位置和这些位置之间的所有连接。
依赖图被用来描述玩家可以利用的不同的建筑物，材料，单元以及技术之间的依赖关系。
状态图用来表示一个系统的每一个可能的状态以及状态之间的转换关系。

两种流行的数据结构被用来表示图，它们是邻接矩阵和邻接表。

1.盲目搜索：
1）深度优先搜索（迭代加深深度优先搜索）
2）广度优先搜索

2.基于开销的图搜索：
1）边放松
2）最短路径树
3）Dijkstra算法
4）Dijkstra算法的一个改进（A＊算法）

触发器（当条件满足时触发）

为了防止这些感知不一致的情况发生，一个智能体的视觉和听觉必须被过滤，以使其和玩家的视力和听力相一致。
一个智能体必须具有一种机制来模仿短期记忆。没有短期记忆，一个智能体就不会考虑在它的感知范围之外的潜在的对手。这会导致似乎十分愚蠢的行为。

命令排队
