$$	shell本身的PID
$!	shell最后运行的后台PID
$?	shell最后运行的命令的结束代码（返回值）命令的运行结果，成功结束是0
$-	使用set命令设定的Flag一览
$*	所有参数列表。将所有参数当成单个参数
$@	所有参数列表。可以单独处理每个参数
$#	shell参数个数
$0	脚本的名字。(命令行输入）
$1-$n	shell各参数值。

引号：
单引号里面的变量不会被值替换.
双引号里面的变量会被值替换。
反引号用来把反引号里面的命令结果赋值给变量	time=`date`

重定向：
输入：	<	由文件输入		<<		內联重定向，指定结束标示符
输出：	>	覆盖文件		>>		追加到文件

使用內联重定向，可能一个命令要操作很多次。使用內联重定向可以写到一起，最后再赋值给变量。记得要在外面加上反引号。

if command
then
	command
elif command
then
	command
else
	command
fi

数值比较：
-eq		等于
-ge		大于等于
-gt		大于
-le		小于等于
-lt		小于
-ne		不等于

不支持浮点运算！！！！
使用双尖括号可进行高级运算。大于，小于不用转义
if (( val1 ** 2 > 70 ))
then
	command
fi

val++
val--
++val
--val
!				逻辑求反
-				位求反
**				幂运算
<<
>>
&
|
&&
||


字符串比较：>	<	=	!=	//>	<	需要转义\>	\<
-n str	长度是否非0			-z str		长度是否为0

使用双方括号使用字符串高级特性	--	模式匹配
if [[ $USER == r* ]]
then
	command
fi
//匹配以r开头的字符

文件比较：
-d	file		file是否存在且是个目录
-e	file		file是否存在
-f	file		file是否存在且是个文件
-r	file		file是否存在且可读
-s	file		file是否存在且非空
-w	file		file是否存在且可写
-x	file		file是否存在且可执行
-O	file		file是否存在且属当前用户
-G	file		file是否存在且默认组与当前用户相同
file1	-nt	file2	file1是否比file2新
file1	-ot file2	file1是否比file2旧

case variable in
pattern1 | pattern2) command1::
pattern3) command::
*)	commands::
esac

for var in list
do 
	commands
done

while command
do
	command
done

untile command		// until和while测试的结果相反
do
	command
done

循环控制：break，continue。
break n 跳出第n级循环，当前循环是1.
continue n 继续第n级循环。

处理循环的输出：
for command
do
	command
done > output
将输出重定向到output

read 设置等待用户输入的时间
if read -t 5 -p "Please enter your name: " name
then
	command
fi

重定向：
ls -la test 2> file1 1> file2
将错误重定向到file1 输出重定向到file2	
！！！注意！！！文件描述符必须放在重定向符号前面没有空格。
特殊重定向符：&> 将错误和输出重定向到同一个文件。


函数：
function name {		}
name()	{}
两种定义方式都一样。
默认情况下，函数的退出状态码是函数中最后一条命令返回的退出状态码。
使用return命令来退出函数并返回特定的退出状态码。


bash shell会将函数当作小型脚本来对待。可以向函数传递参数。
$1-$n	获得传入参数。

在函数中可以使用脚本中的变量，而且函数中改变变量值，会影响整个脚本中变量的值。
慎用全局变量！！！！！
可以在函数中使用局部变量。在变量前加local关键字。local temp=1

在不同脚本间使用函数。使用source命令。source命令会在当前的shell上下文中执行命令，而不是创建一个新的shell来执行命令。可以用source命令来在shell脚本中运行库文件，这样函数就对脚本可用了。
source命令有个快捷别名，称作点操作符。在shell中运行myfuncs文件，只需添加. ./myfuncs		//假定myfuns和shell脚本在同一目录


整理：
单小括号：（）
1.和反引号效果相同。括号里面可以是一组命令，命令之间以分号隔开。在新的shell里面执行。
2.用于初始化数组。如array=(a b c d)

双小括号：(())
整数运算扩展

中括号：[]
test与test命令相同

双中括号：[[]]
支持字符模式匹配

大括号：{}
1.扩展。在大括号中，不允许有空白。如ls {ex1,ex2}.sh 结果为ex1.sh ex2.sh
ls {ex{1..3},ex4}.sh	结果为 ex1.sh ex2.sh ex3.sh ex4.sh
大括号中对(..)做扩展
2.原型变量。${var}是shell中的原型变量。var="d" echo ${var}AA 结果dAA
如果不用大括号.echo $varAA 会被当成一个变量 而出错。
3.结构替换。
${var:-string}	若变量var为空，则用string替换${var:-string}否则用var替换。
${var:=string}	若变量var为空，则用string替换，且把string赋值给var
${var:+string}	若变量var不为空时，替换。
${var:?string}	若变量var不为空，则用var替换，为空，则把string输出到标准错误中，并从脚本退出。
4.模式匹配。
${var%pattern}	去掉右边最短的pattern
${var%%pattern}	去掉右边最长的pattern
${var#pattern}	去掉左边最短的pattern
${var##pattern} 去掉左边最长的pattern
pattern支持通配符，*表示零个或多个任意字符，?表示零个或一个字符，[..]匹配括号里面的字符。[!..]匹配不是括号里面的字符。
${var/pattern/sub}	以sub替换pattern
${var//pattern/sub}	双斜杠表示替换所有匹配

IFS	设置脚本内的分隔符





